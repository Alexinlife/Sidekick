{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\alexi\\\\GitHub\\\\sidekick\\\\app\\\\src\\\\components\\\\rfc\\\\CreationProduits.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport '../../css/Style.css';\nimport { Formik, Form, FieldArray, useField } from 'formik';\nimport * as Yup from 'yup'; // Composants Material-UI\n\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nconst initialValues = {\n  produits: [{\n    code: '',\n    descrption: '',\n    qte_demandee: '',\n    prix: ''\n  }]\n}; // Localisation en français\n\nYup.setLocale({\n  mixed: {\n    // eslint-disable-next-line\n    default: 'Champ ${path} invalide',\n    // eslint-disable-next-line\n    required: 'Le champ ${path} est obligatoire'\n  },\n  string: {\n    // eslint-disable-next-line\n    max: 'Le champ ${path} doit contenir un maximum de ${max} caractères'\n  },\n  number: {\n    // eslint-disable-next-line\n    integer: 'Le champ ${path} doit contenir un nombre entier',\n    // eslint-disable-next-line\n    positive: 'Le champ ${path} doit contenir un nombre positif',\n    // eslint-disable-next-line\n    min: 'Le champ ${path} doit avoir un nombre supérieur à ${min}'\n  }\n}); // Schéma de validation Yup\n\nconst schema = Yup.object({\n  produits: Yup.array().of(Yup.object({\n    code: Yup.string().max(32)\n    /**\r\n     * @see https://krzysztofzuraw.com/blog/2020/yup-validation-two-fields\r\n     */\n    .test('ouInclusifCodeDesc', // test name\n    'Au moins l\\'un des champs code et description doit être rempli', // validation message to the user\n    // it has to be function definition to use 'this'\n    function (code) {\n      const {\n        description\n      } = this.parent;\n\n      if (code || description) {\n        return true; // lorsqu'il y a au moins un champs de rempli\n      }\n\n      return false;\n    }),\n    description: Yup.string().max(255)\n    /**\r\n     * @see https://krzysztofzuraw.com/blog/2020/yup-validation-two-fields\r\n     */\n    .test('ouInclusifCodeDesc', // test name\n    'Au moins l\\'un des champs code et description doit être rempli', // validation message to the user\n    // it has to be function definition to use 'this'\n    function (description) {\n      const {\n        code\n      } = this.parent;\n\n      if (code || description) {\n        return true; // lorsqu'il y a au moins un champs de rempli\n      }\n\n      return false;\n    }),\n    qte_demandee: Yup.number().integer().min(1).required() // eslint-disable-next-line\n    .typeError('Le champs ${path} doit contenir un nombre'),\n    prix: Yup.number().min(0.0050).positive() // eslint-disable-next-line\n    .typeError('Le champs ${path} doit contenir un nombre')\n  }))\n});\n\nconst MyTextField = ({\n  placeholder,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta] = useField(props);\n  const error = meta.error && meta.touched ? meta.error : '';\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    className: \"product-form-item\",\n    placeholder: placeholder,\n    ...field,\n    helperText: error,\n    error: !!error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n/**\r\n * @author Alex Lajeunesse\r\n * @function CréerProduits\r\n * @description Gère la section d'ajout de produits (affichage, requêtes à l'API, redirection et formulaires)\r\n * @see https://formik.org/docs/examples/field-arrays\r\n */\n\n\n_s(MyTextField, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextField;\nexport default function CreerProduits(props) {\n  console.log(this.props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Produits\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        validateOnChange: true,\n        initialValues: initialValues,\n        onSubmit: (data, {\n          setSubmitting\n        }) => {\n          setSubmitting(true);\n          console.log(data);\n          setSubmitting(false);\n        },\n        validationSchema: schema,\n        children: ({\n          values,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FieldArray, {\n            name: \"produits\",\n            children: ({\n              insert,\n              remove,\n              push\n            }) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [values.produits.length > 0 && values.produits.map((produit, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col\",\n                  children: [/*#__PURE__*/_jsxDEV(MyTextField, {\n                    name: `produits.${index}.qte_demandee`,\n                    placeholder: \"Quantit\\xE9 demand\\xE9e\",\n                    type: \"text\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(MyTextField, {\n                    name: `produits.${index}.code`,\n                    placeholder: \"Code\",\n                    type: \"text\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(MyTextField, {\n                    name: `produits.${index}.description`,\n                    placeholder: \"Description\",\n                    type: \"text\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(MyTextField, {\n                    name: `produits.${index}.prix`,\n                    placeholder: \"Prix\",\n                    type: \"text\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    className: \"form-button\",\n                    disabled: isSubmitting,\n                    onClick: () => remove(index),\n                    children: /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"X\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 164,\n                      columnNumber: 143\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 53\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 49\n              }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"form-item\",\n                disabled: isSubmitting,\n                onClick: () => push({\n                  code: '',\n                  descrption: '',\n                  qte_demandee: '',\n                  prix: ''\n                }),\n                children: /*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"Ajouter un produit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 42\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"form-item\",\n            disabled: isSubmitting,\n            type: \"submit\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Enregistrer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 97\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(values, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_c2 = CreerProduits;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextField\");\n$RefreshReg$(_c2, \"CreerProduits\");","map":{"version":3,"sources":["C:/Users/alexi/GitHub/sidekick/app/src/components/rfc/CreationProduits.jsx"],"names":["React","Formik","Form","FieldArray","useField","Yup","Paper","TextField","Button","initialValues","produits","code","descrption","qte_demandee","prix","setLocale","mixed","default","required","string","max","number","integer","positive","min","schema","object","array","of","test","description","parent","typeError","MyTextField","placeholder","props","field","meta","error","touched","CreerProduits","console","log","data","setSubmitting","values","isSubmitting","handleChange","handleBlur","handleSubmit","insert","remove","push","length","map","produit","index","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../../css/Style.css';\r\nimport { Formik, Form, FieldArray, useField } from 'formik';\r\nimport * as Yup from 'yup';\r\n// Composants Material-UI\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst initialValues = {\r\n    produits: [\r\n        {\r\n            code: '',\r\n            descrption: '',\r\n            qte_demandee: '',\r\n            prix: ''\r\n        },\r\n    ],\r\n};\r\n\r\n// Localisation en français\r\nYup.setLocale({\r\n    mixed: {\r\n        // eslint-disable-next-line\r\n        default: 'Champ ${path} invalide',\r\n        // eslint-disable-next-line\r\n        required: 'Le champ ${path} est obligatoire'\r\n    },\r\n    string: {\r\n        // eslint-disable-next-line\r\n        max: 'Le champ ${path} doit contenir un maximum de ${max} caractères',\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line\r\n        integer: 'Le champ ${path} doit contenir un nombre entier',\r\n        // eslint-disable-next-line\r\n        positive: 'Le champ ${path} doit contenir un nombre positif',\r\n        // eslint-disable-next-line\r\n        min: 'Le champ ${path} doit avoir un nombre supérieur à ${min}'\r\n    }\r\n});\r\n\r\n// Schéma de validation Yup\r\nconst schema = Yup.object({\r\n    produits: Yup.array().of(\r\n        Yup.object({\r\n            code: Yup.string()\r\n                .max(32)\r\n                /**\r\n                 * @see https://krzysztofzuraw.com/blog/2020/yup-validation-two-fields\r\n                 */\r\n                .test(\r\n                    'ouInclusifCodeDesc', // test name\r\n                    'Au moins l\\'un des champs code et description doit être rempli', // validation message to the user\r\n                    // it has to be function definition to use 'this'\r\n                    function (code) {\r\n                        const { description } = this.parent;\r\n                        if (code || description) {\r\n                            return true; // lorsqu'il y a au moins un champs de rempli\r\n                        }\r\n                        return false;\r\n                    }\r\n                ),\r\n\r\n            description: Yup.string()\r\n                .max(255)\r\n                /**\r\n                 * @see https://krzysztofzuraw.com/blog/2020/yup-validation-two-fields\r\n                 */\r\n                .test(\r\n                    'ouInclusifCodeDesc', // test name\r\n                    'Au moins l\\'un des champs code et description doit être rempli', // validation message to the user\r\n                    // it has to be function definition to use 'this'\r\n                    function (description) {\r\n                        const { code } = this.parent;\r\n                        if (code || description) {\r\n                            return true; // lorsqu'il y a au moins un champs de rempli\r\n                        }\r\n                        return false;\r\n                    }\r\n                ),\r\n\r\n            qte_demandee: Yup.number()\r\n                .integer()\r\n                .min(1)\r\n                .required()\r\n                // eslint-disable-next-line\r\n                .typeError('Le champs ${path} doit contenir un nombre'),\r\n\r\n            prix: Yup.number()\r\n                .min(0.0050)\r\n                .positive()\r\n                // eslint-disable-next-line\r\n                .typeError('Le champs ${path} doit contenir un nombre')\r\n        })\r\n    )\r\n});\r\n\r\nconst MyTextField = ({ placeholder, ...props }) => {\r\n    const [field, meta] = useField(props);\r\n    const error = meta.error && meta.touched ? meta.error : '';\r\n    return (\r\n        <TextField\r\n            className=\"product-form-item\"\r\n            placeholder={placeholder}\r\n            {...field}\r\n            helperText={error}\r\n            error={!!error}\r\n        />\r\n    );\r\n}\r\n\r\n/**\r\n * @author Alex Lajeunesse\r\n * @function CréerProduits\r\n * @description Gère la section d'ajout de produits (affichage, requêtes à l'API, redirection et formulaires)\r\n * @see https://formik.org/docs/examples/field-arrays\r\n */\r\nexport default function CreerProduits(props) {\r\n    console.log(this.props);\r\n    return (\r\n        <div>\r\n            <h1>Produits</h1>\r\n            <Paper>\r\n                <Formik\r\n                    validateOnChange\r\n                    initialValues={initialValues}\r\n                    onSubmit={(data, { setSubmitting }) => {\r\n                        setSubmitting(true);\r\n                        console.log(data);\r\n                        setSubmitting(false);\r\n                    }}\r\n                    validationSchema={schema}\r\n                >\r\n                    {({ values, isSubmitting, handleChange, handleBlur, handleSubmit }) => (\r\n                        <Form>\r\n                            <FieldArray name=\"produits\">\r\n                                {({ insert, remove, push }) => (\r\n                                    <div>\r\n                                        {values.produits.length > 0 &&\r\n                                            values.produits.map((produit, index) => (\r\n                                                <div className=\"row\" key={index}>\r\n                                                    <div className=\"col\">\r\n                                                        <MyTextField\r\n                                                            name={`produits.${index}.qte_demandee`}\r\n                                                            placeholder=\"Quantité demandée\"\r\n                                                            type=\"text\"\r\n                                                        />\r\n                                                        <MyTextField\r\n                                                            name={`produits.${index}.code`}\r\n                                                            placeholder=\"Code\"\r\n                                                            type=\"text\"\r\n                                                        />\r\n                                                        <MyTextField\r\n                                                            name={`produits.${index}.description`}\r\n                                                            placeholder=\"Description\"\r\n                                                            type=\"text\"\r\n                                                        />\r\n                                                        <MyTextField\r\n                                                            name={`produits.${index}.prix`}\r\n                                                            placeholder=\"Prix\"\r\n                                                            type=\"text\"\r\n                                                        />\r\n                                                        <Button className=\"form-button\" disabled={isSubmitting} onClick={() => remove(index)}><b>X</b></Button>\r\n                                                    </div>\r\n                                                    <div className=\"col\">\r\n                                                    </div>\r\n                                                </div>\r\n                                            ))}\r\n                                        <Button className=\"form-item\" disabled={isSubmitting}\r\n                                            onClick={() => push({ code: '', descrption: '', qte_demandee: '', prix: '' })}\r\n                                        ><b>Ajouter un produit</b></Button>\r\n                                    </div>\r\n                                )}\r\n                            </FieldArray>\r\n                            <Button className=\"form-item\" disabled={isSubmitting} type=\"submit\"><b>Enregistrer</b></Button>\r\n                            <pre>{JSON.stringify(values, null, 2)}</pre>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}